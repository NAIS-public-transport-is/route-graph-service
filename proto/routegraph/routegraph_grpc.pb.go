// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/routegraph.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouteGraph_CreateStop_FullMethodName       = "/routegraph.RouteGraph/CreateStop"
	RouteGraph_GetStop_FullMethodName          = "/routegraph.RouteGraph/GetStop"
	RouteGraph_UpdateStop_FullMethodName       = "/routegraph.RouteGraph/UpdateStop"
	RouteGraph_DeleteStop_FullMethodName       = "/routegraph.RouteGraph/DeleteStop"
	RouteGraph_CreateLine_FullMethodName       = "/routegraph.RouteGraph/CreateLine"
	RouteGraph_GetLine_FullMethodName          = "/routegraph.RouteGraph/GetLine"
	RouteGraph_UpdateLine_FullMethodName       = "/routegraph.RouteGraph/UpdateLine"
	RouteGraph_DeleteLine_FullMethodName       = "/routegraph.RouteGraph/DeleteLine"
	RouteGraph_CreateVehicle_FullMethodName    = "/routegraph.RouteGraph/CreateVehicle"
	RouteGraph_GetVehicle_FullMethodName       = "/routegraph.RouteGraph/GetVehicle"
	RouteGraph_UpdateVehicle_FullMethodName    = "/routegraph.RouteGraph/UpdateVehicle"
	RouteGraph_DeleteVehicle_FullMethodName    = "/routegraph.RouteGraph/DeleteVehicle"
	RouteGraph_CreateDepot_FullMethodName      = "/routegraph.RouteGraph/CreateDepot"
	RouteGraph_GetDepot_FullMethodName         = "/routegraph.RouteGraph/GetDepot"
	RouteGraph_UpdateDepot_FullMethodName      = "/routegraph.RouteGraph/UpdateDepot"
	RouteGraph_DeleteDepot_FullMethodName      = "/routegraph.RouteGraph/DeleteDepot"
	RouteGraph_GetNextEdge_FullMethodName      = "/routegraph.RouteGraph/GetNextEdge"
	RouteGraph_CreateNextEdge_FullMethodName   = "/routegraph.RouteGraph/CreateNextEdge"
	RouteGraph_UpdateNextEdge_FullMethodName   = "/routegraph.RouteGraph/UpdateNextEdge"
	RouteGraph_DeleteNextEdge_FullMethodName   = "/routegraph.RouteGraph/DeleteNextEdge"
	RouteGraph_GetServesEdge_FullMethodName    = "/routegraph.RouteGraph/GetServesEdge"
	RouteGraph_CreateServesEdge_FullMethodName = "/routegraph.RouteGraph/CreateServesEdge"
	RouteGraph_UpdateServesEdge_FullMethodName = "/routegraph.RouteGraph/UpdateServesEdge"
	RouteGraph_DeleteServesEdge_FullMethodName = "/routegraph.RouteGraph/DeleteServesEdge"
	RouteGraph_GetAssignedTo_FullMethodName    = "/routegraph.RouteGraph/GetAssignedTo"
	RouteGraph_CreateAssignedTo_FullMethodName = "/routegraph.RouteGraph/CreateAssignedTo"
	RouteGraph_UpdateAssignedTo_FullMethodName = "/routegraph.RouteGraph/UpdateAssignedTo"
	RouteGraph_DeleteAssignedTo_FullMethodName = "/routegraph.RouteGraph/DeleteAssignedTo"
	RouteGraph_GetParkedAt_FullMethodName      = "/routegraph.RouteGraph/GetParkedAt"
	RouteGraph_CreateParkedAt_FullMethodName   = "/routegraph.RouteGraph/CreateParkedAt"
	RouteGraph_UpdateParkedAt_FullMethodName   = "/routegraph.RouteGraph/UpdateParkedAt"
	RouteGraph_DeleteParkedAt_FullMethodName   = "/routegraph.RouteGraph/DeleteParkedAt"
	RouteGraph_AssignVehicle_FullMethodName    = "/routegraph.RouteGraph/AssignVehicle"
	RouteGraph_RecalibrateEdge_FullMethodName  = "/routegraph.RouteGraph/RecalibrateEdge"
	RouteGraph_ShortestPath_FullMethodName     = "/routegraph.RouteGraph/ShortestPath"
	RouteGraph_TopPairs_FullMethodName         = "/routegraph.RouteGraph/TopPairs"
	RouteGraph_DepotsIdleStats_FullMethodName  = "/routegraph.RouteGraph/DepotsIdleStats"
)

// RouteGraphClient is the client API for RouteGraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGraphClient interface {
	// Stops
	CreateStop(ctx context.Context, in *Stop, opts ...grpc.CallOption) (*Stop, error)
	GetStop(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Stop, error)
	UpdateStop(ctx context.Context, in *Stop, opts ...grpc.CallOption) (*Stop, error)
	DeleteStop(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// Lines
	CreateLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*Line, error)
	GetLine(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Line, error)
	UpdateLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*Line, error)
	DeleteLine(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// Vehicles
	CreateVehicle(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*Vehicle, error)
	GetVehicle(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Vehicle, error)
	UpdateVehicle(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*Vehicle, error)
	DeleteVehicle(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// Depots
	CreateDepot(ctx context.Context, in *Depot, opts ...grpc.CallOption) (*Depot, error)
	GetDepot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Depot, error)
	UpdateDepot(ctx context.Context, in *Depot, opts ...grpc.CallOption) (*Depot, error)
	DeleteDepot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error)
	// Edges CRUD
	GetNextEdge(ctx context.Context, in *NextEdge, opts ...grpc.CallOption) (*NextEdge, error)
	CreateNextEdge(ctx context.Context, in *NextEdge, opts ...grpc.CallOption) (*NextEdge, error)
	UpdateNextEdge(ctx context.Context, in *NextEdge, opts ...grpc.CallOption) (*NextEdge, error)
	DeleteNextEdge(ctx context.Context, in *NextEdge, opts ...grpc.CallOption) (*Empty, error)
	GetServesEdge(ctx context.Context, in *ServesEdge, opts ...grpc.CallOption) (*ServesEdge, error)
	CreateServesEdge(ctx context.Context, in *ServesEdge, opts ...grpc.CallOption) (*ServesEdge, error)
	UpdateServesEdge(ctx context.Context, in *ServesEdge, opts ...grpc.CallOption) (*ServesEdge, error)
	DeleteServesEdge(ctx context.Context, in *ServesEdge, opts ...grpc.CallOption) (*Empty, error)
	GetAssignedTo(ctx context.Context, in *AssignedTo, opts ...grpc.CallOption) (*AssignedTo, error)
	CreateAssignedTo(ctx context.Context, in *AssignedTo, opts ...grpc.CallOption) (*AssignedTo, error)
	UpdateAssignedTo(ctx context.Context, in *AssignedTo, opts ...grpc.CallOption) (*AssignedTo, error)
	DeleteAssignedTo(ctx context.Context, in *AssignedTo, opts ...grpc.CallOption) (*Empty, error)
	GetParkedAt(ctx context.Context, in *ParkedAt, opts ...grpc.CallOption) (*ParkedAt, error)
	CreateParkedAt(ctx context.Context, in *ParkedAt, opts ...grpc.CallOption) (*ParkedAt, error)
	UpdateParkedAt(ctx context.Context, in *ParkedAt, opts ...grpc.CallOption) (*ParkedAt, error)
	DeleteParkedAt(ctx context.Context, in *ParkedAt, opts ...grpc.CallOption) (*Empty, error)
	// Complex queries (the 5 required)
	AssignVehicle(ctx context.Context, in *AssignVehicleRequest, opts ...grpc.CallOption) (*AssignVehicleResponse, error)
	RecalibrateEdge(ctx context.Context, in *RecalibrateRequest, opts ...grpc.CallOption) (*NextEdge, error)
	ShortestPath(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathResponse, error)
	TopPairs(ctx context.Context, in *TopPairsRequest, opts ...grpc.CallOption) (*TopPairsResponse, error)
	DepotsIdleStats(ctx context.Context, in *DepotsRequest, opts ...grpc.CallOption) (*DepotsResponse, error)
}

type routeGraphClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGraphClient(cc grpc.ClientConnInterface) RouteGraphClient {
	return &routeGraphClient{cc}
}

func (c *routeGraphClient) CreateStop(ctx context.Context, in *Stop, opts ...grpc.CallOption) (*Stop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stop)
	err := c.cc.Invoke(ctx, RouteGraph_CreateStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) GetStop(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Stop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stop)
	err := c.cc.Invoke(ctx, RouteGraph_GetStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) UpdateStop(ctx context.Context, in *Stop, opts ...grpc.CallOption) (*Stop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stop)
	err := c.cc.Invoke(ctx, RouteGraph_UpdateStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DeleteStop(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RouteGraph_DeleteStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) CreateLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*Line, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Line)
	err := c.cc.Invoke(ctx, RouteGraph_CreateLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) GetLine(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Line, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Line)
	err := c.cc.Invoke(ctx, RouteGraph_GetLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) UpdateLine(ctx context.Context, in *Line, opts ...grpc.CallOption) (*Line, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Line)
	err := c.cc.Invoke(ctx, RouteGraph_UpdateLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DeleteLine(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RouteGraph_DeleteLine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) CreateVehicle(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*Vehicle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, RouteGraph_CreateVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) GetVehicle(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Vehicle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, RouteGraph_GetVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) UpdateVehicle(ctx context.Context, in *Vehicle, opts ...grpc.CallOption) (*Vehicle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, RouteGraph_UpdateVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DeleteVehicle(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RouteGraph_DeleteVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) CreateDepot(ctx context.Context, in *Depot, opts ...grpc.CallOption) (*Depot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Depot)
	err := c.cc.Invoke(ctx, RouteGraph_CreateDepot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) GetDepot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Depot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Depot)
	err := c.cc.Invoke(ctx, RouteGraph_GetDepot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) UpdateDepot(ctx context.Context, in *Depot, opts ...grpc.CallOption) (*Depot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Depot)
	err := c.cc.Invoke(ctx, RouteGraph_UpdateDepot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DeleteDepot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RouteGraph_DeleteDepot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) GetNextEdge(ctx context.Context, in *NextEdge, opts ...grpc.CallOption) (*NextEdge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextEdge)
	err := c.cc.Invoke(ctx, RouteGraph_GetNextEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) CreateNextEdge(ctx context.Context, in *NextEdge, opts ...grpc.CallOption) (*NextEdge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextEdge)
	err := c.cc.Invoke(ctx, RouteGraph_CreateNextEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) UpdateNextEdge(ctx context.Context, in *NextEdge, opts ...grpc.CallOption) (*NextEdge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextEdge)
	err := c.cc.Invoke(ctx, RouteGraph_UpdateNextEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DeleteNextEdge(ctx context.Context, in *NextEdge, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RouteGraph_DeleteNextEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) GetServesEdge(ctx context.Context, in *ServesEdge, opts ...grpc.CallOption) (*ServesEdge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServesEdge)
	err := c.cc.Invoke(ctx, RouteGraph_GetServesEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) CreateServesEdge(ctx context.Context, in *ServesEdge, opts ...grpc.CallOption) (*ServesEdge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServesEdge)
	err := c.cc.Invoke(ctx, RouteGraph_CreateServesEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) UpdateServesEdge(ctx context.Context, in *ServesEdge, opts ...grpc.CallOption) (*ServesEdge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServesEdge)
	err := c.cc.Invoke(ctx, RouteGraph_UpdateServesEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DeleteServesEdge(ctx context.Context, in *ServesEdge, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RouteGraph_DeleteServesEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) GetAssignedTo(ctx context.Context, in *AssignedTo, opts ...grpc.CallOption) (*AssignedTo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignedTo)
	err := c.cc.Invoke(ctx, RouteGraph_GetAssignedTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) CreateAssignedTo(ctx context.Context, in *AssignedTo, opts ...grpc.CallOption) (*AssignedTo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignedTo)
	err := c.cc.Invoke(ctx, RouteGraph_CreateAssignedTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) UpdateAssignedTo(ctx context.Context, in *AssignedTo, opts ...grpc.CallOption) (*AssignedTo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignedTo)
	err := c.cc.Invoke(ctx, RouteGraph_UpdateAssignedTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DeleteAssignedTo(ctx context.Context, in *AssignedTo, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RouteGraph_DeleteAssignedTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) GetParkedAt(ctx context.Context, in *ParkedAt, opts ...grpc.CallOption) (*ParkedAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkedAt)
	err := c.cc.Invoke(ctx, RouteGraph_GetParkedAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) CreateParkedAt(ctx context.Context, in *ParkedAt, opts ...grpc.CallOption) (*ParkedAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkedAt)
	err := c.cc.Invoke(ctx, RouteGraph_CreateParkedAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) UpdateParkedAt(ctx context.Context, in *ParkedAt, opts ...grpc.CallOption) (*ParkedAt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkedAt)
	err := c.cc.Invoke(ctx, RouteGraph_UpdateParkedAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DeleteParkedAt(ctx context.Context, in *ParkedAt, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RouteGraph_DeleteParkedAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) AssignVehicle(ctx context.Context, in *AssignVehicleRequest, opts ...grpc.CallOption) (*AssignVehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignVehicleResponse)
	err := c.cc.Invoke(ctx, RouteGraph_AssignVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) RecalibrateEdge(ctx context.Context, in *RecalibrateRequest, opts ...grpc.CallOption) (*NextEdge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextEdge)
	err := c.cc.Invoke(ctx, RouteGraph_RecalibrateEdge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) ShortestPath(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*PathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PathResponse)
	err := c.cc.Invoke(ctx, RouteGraph_ShortestPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) TopPairs(ctx context.Context, in *TopPairsRequest, opts ...grpc.CallOption) (*TopPairsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopPairsResponse)
	err := c.cc.Invoke(ctx, RouteGraph_TopPairs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGraphClient) DepotsIdleStats(ctx context.Context, in *DepotsRequest, opts ...grpc.CallOption) (*DepotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepotsResponse)
	err := c.cc.Invoke(ctx, RouteGraph_DepotsIdleStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteGraphServer is the server API for RouteGraph service.
// All implementations must embed UnimplementedRouteGraphServer
// for forward compatibility.
type RouteGraphServer interface {
	// Stops
	CreateStop(context.Context, *Stop) (*Stop, error)
	GetStop(context.Context, *ID) (*Stop, error)
	UpdateStop(context.Context, *Stop) (*Stop, error)
	DeleteStop(context.Context, *ID) (*Empty, error)
	// Lines
	CreateLine(context.Context, *Line) (*Line, error)
	GetLine(context.Context, *ID) (*Line, error)
	UpdateLine(context.Context, *Line) (*Line, error)
	DeleteLine(context.Context, *ID) (*Empty, error)
	// Vehicles
	CreateVehicle(context.Context, *Vehicle) (*Vehicle, error)
	GetVehicle(context.Context, *ID) (*Vehicle, error)
	UpdateVehicle(context.Context, *Vehicle) (*Vehicle, error)
	DeleteVehicle(context.Context, *ID) (*Empty, error)
	// Depots
	CreateDepot(context.Context, *Depot) (*Depot, error)
	GetDepot(context.Context, *ID) (*Depot, error)
	UpdateDepot(context.Context, *Depot) (*Depot, error)
	DeleteDepot(context.Context, *ID) (*Empty, error)
	// Edges CRUD
	GetNextEdge(context.Context, *NextEdge) (*NextEdge, error)
	CreateNextEdge(context.Context, *NextEdge) (*NextEdge, error)
	UpdateNextEdge(context.Context, *NextEdge) (*NextEdge, error)
	DeleteNextEdge(context.Context, *NextEdge) (*Empty, error)
	GetServesEdge(context.Context, *ServesEdge) (*ServesEdge, error)
	CreateServesEdge(context.Context, *ServesEdge) (*ServesEdge, error)
	UpdateServesEdge(context.Context, *ServesEdge) (*ServesEdge, error)
	DeleteServesEdge(context.Context, *ServesEdge) (*Empty, error)
	GetAssignedTo(context.Context, *AssignedTo) (*AssignedTo, error)
	CreateAssignedTo(context.Context, *AssignedTo) (*AssignedTo, error)
	UpdateAssignedTo(context.Context, *AssignedTo) (*AssignedTo, error)
	DeleteAssignedTo(context.Context, *AssignedTo) (*Empty, error)
	GetParkedAt(context.Context, *ParkedAt) (*ParkedAt, error)
	CreateParkedAt(context.Context, *ParkedAt) (*ParkedAt, error)
	UpdateParkedAt(context.Context, *ParkedAt) (*ParkedAt, error)
	DeleteParkedAt(context.Context, *ParkedAt) (*Empty, error)
	// Complex queries (the 5 required)
	AssignVehicle(context.Context, *AssignVehicleRequest) (*AssignVehicleResponse, error)
	RecalibrateEdge(context.Context, *RecalibrateRequest) (*NextEdge, error)
	ShortestPath(context.Context, *PathRequest) (*PathResponse, error)
	TopPairs(context.Context, *TopPairsRequest) (*TopPairsResponse, error)
	DepotsIdleStats(context.Context, *DepotsRequest) (*DepotsResponse, error)
	mustEmbedUnimplementedRouteGraphServer()
}

// UnimplementedRouteGraphServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteGraphServer struct{}

func (UnimplementedRouteGraphServer) CreateStop(context.Context, *Stop) (*Stop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStop not implemented")
}
func (UnimplementedRouteGraphServer) GetStop(context.Context, *ID) (*Stop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStop not implemented")
}
func (UnimplementedRouteGraphServer) UpdateStop(context.Context, *Stop) (*Stop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStop not implemented")
}
func (UnimplementedRouteGraphServer) DeleteStop(context.Context, *ID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStop not implemented")
}
func (UnimplementedRouteGraphServer) CreateLine(context.Context, *Line) (*Line, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLine not implemented")
}
func (UnimplementedRouteGraphServer) GetLine(context.Context, *ID) (*Line, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLine not implemented")
}
func (UnimplementedRouteGraphServer) UpdateLine(context.Context, *Line) (*Line, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLine not implemented")
}
func (UnimplementedRouteGraphServer) DeleteLine(context.Context, *ID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLine not implemented")
}
func (UnimplementedRouteGraphServer) CreateVehicle(context.Context, *Vehicle) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedRouteGraphServer) GetVehicle(context.Context, *ID) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedRouteGraphServer) UpdateVehicle(context.Context, *Vehicle) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicle not implemented")
}
func (UnimplementedRouteGraphServer) DeleteVehicle(context.Context, *ID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVehicle not implemented")
}
func (UnimplementedRouteGraphServer) CreateDepot(context.Context, *Depot) (*Depot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepot not implemented")
}
func (UnimplementedRouteGraphServer) GetDepot(context.Context, *ID) (*Depot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepot not implemented")
}
func (UnimplementedRouteGraphServer) UpdateDepot(context.Context, *Depot) (*Depot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepot not implemented")
}
func (UnimplementedRouteGraphServer) DeleteDepot(context.Context, *ID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepot not implemented")
}
func (UnimplementedRouteGraphServer) GetNextEdge(context.Context, *NextEdge) (*NextEdge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextEdge not implemented")
}
func (UnimplementedRouteGraphServer) CreateNextEdge(context.Context, *NextEdge) (*NextEdge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextEdge not implemented")
}
func (UnimplementedRouteGraphServer) UpdateNextEdge(context.Context, *NextEdge) (*NextEdge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNextEdge not implemented")
}
func (UnimplementedRouteGraphServer) DeleteNextEdge(context.Context, *NextEdge) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNextEdge not implemented")
}
func (UnimplementedRouteGraphServer) GetServesEdge(context.Context, *ServesEdge) (*ServesEdge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServesEdge not implemented")
}
func (UnimplementedRouteGraphServer) CreateServesEdge(context.Context, *ServesEdge) (*ServesEdge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServesEdge not implemented")
}
func (UnimplementedRouteGraphServer) UpdateServesEdge(context.Context, *ServesEdge) (*ServesEdge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServesEdge not implemented")
}
func (UnimplementedRouteGraphServer) DeleteServesEdge(context.Context, *ServesEdge) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServesEdge not implemented")
}
func (UnimplementedRouteGraphServer) GetAssignedTo(context.Context, *AssignedTo) (*AssignedTo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedTo not implemented")
}
func (UnimplementedRouteGraphServer) CreateAssignedTo(context.Context, *AssignedTo) (*AssignedTo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssignedTo not implemented")
}
func (UnimplementedRouteGraphServer) UpdateAssignedTo(context.Context, *AssignedTo) (*AssignedTo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignedTo not implemented")
}
func (UnimplementedRouteGraphServer) DeleteAssignedTo(context.Context, *AssignedTo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssignedTo not implemented")
}
func (UnimplementedRouteGraphServer) GetParkedAt(context.Context, *ParkedAt) (*ParkedAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkedAt not implemented")
}
func (UnimplementedRouteGraphServer) CreateParkedAt(context.Context, *ParkedAt) (*ParkedAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParkedAt not implemented")
}
func (UnimplementedRouteGraphServer) UpdateParkedAt(context.Context, *ParkedAt) (*ParkedAt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParkedAt not implemented")
}
func (UnimplementedRouteGraphServer) DeleteParkedAt(context.Context, *ParkedAt) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParkedAt not implemented")
}
func (UnimplementedRouteGraphServer) AssignVehicle(context.Context, *AssignVehicleRequest) (*AssignVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignVehicle not implemented")
}
func (UnimplementedRouteGraphServer) RecalibrateEdge(context.Context, *RecalibrateRequest) (*NextEdge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecalibrateEdge not implemented")
}
func (UnimplementedRouteGraphServer) ShortestPath(context.Context, *PathRequest) (*PathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortestPath not implemented")
}
func (UnimplementedRouteGraphServer) TopPairs(context.Context, *TopPairsRequest) (*TopPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopPairs not implemented")
}
func (UnimplementedRouteGraphServer) DepotsIdleStats(context.Context, *DepotsRequest) (*DepotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepotsIdleStats not implemented")
}
func (UnimplementedRouteGraphServer) mustEmbedUnimplementedRouteGraphServer() {}
func (UnimplementedRouteGraphServer) testEmbeddedByValue()                    {}

// UnsafeRouteGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGraphServer will
// result in compilation errors.
type UnsafeRouteGraphServer interface {
	mustEmbedUnimplementedRouteGraphServer()
}

func RegisterRouteGraphServer(s grpc.ServiceRegistrar, srv RouteGraphServer) {
	// If the following call pancis, it indicates UnimplementedRouteGraphServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouteGraph_ServiceDesc, srv)
}

func _RouteGraph_CreateStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).CreateStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_CreateStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).CreateStop(ctx, req.(*Stop))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_GetStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).GetStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_GetStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).GetStop(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_UpdateStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).UpdateStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_UpdateStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).UpdateStop(ctx, req.(*Stop))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DeleteStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DeleteStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DeleteStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DeleteStop(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_CreateLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Line)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).CreateLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_CreateLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).CreateLine(ctx, req.(*Line))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_GetLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).GetLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_GetLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).GetLine(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_UpdateLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Line)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).UpdateLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_UpdateLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).UpdateLine(ctx, req.(*Line))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DeleteLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DeleteLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DeleteLine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DeleteLine(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vehicle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_CreateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).CreateVehicle(ctx, req.(*Vehicle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_GetVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).GetVehicle(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_UpdateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vehicle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).UpdateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_UpdateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).UpdateVehicle(ctx, req.(*Vehicle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DeleteVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DeleteVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DeleteVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DeleteVehicle(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_CreateDepot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Depot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).CreateDepot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_CreateDepot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).CreateDepot(ctx, req.(*Depot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_GetDepot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).GetDepot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_GetDepot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).GetDepot(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_UpdateDepot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Depot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).UpdateDepot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_UpdateDepot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).UpdateDepot(ctx, req.(*Depot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DeleteDepot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DeleteDepot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DeleteDepot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DeleteDepot(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_GetNextEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextEdge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).GetNextEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_GetNextEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).GetNextEdge(ctx, req.(*NextEdge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_CreateNextEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextEdge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).CreateNextEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_CreateNextEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).CreateNextEdge(ctx, req.(*NextEdge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_UpdateNextEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextEdge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).UpdateNextEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_UpdateNextEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).UpdateNextEdge(ctx, req.(*NextEdge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DeleteNextEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextEdge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DeleteNextEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DeleteNextEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DeleteNextEdge(ctx, req.(*NextEdge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_GetServesEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServesEdge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).GetServesEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_GetServesEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).GetServesEdge(ctx, req.(*ServesEdge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_CreateServesEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServesEdge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).CreateServesEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_CreateServesEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).CreateServesEdge(ctx, req.(*ServesEdge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_UpdateServesEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServesEdge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).UpdateServesEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_UpdateServesEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).UpdateServesEdge(ctx, req.(*ServesEdge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DeleteServesEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServesEdge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DeleteServesEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DeleteServesEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DeleteServesEdge(ctx, req.(*ServesEdge))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_GetAssignedTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignedTo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).GetAssignedTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_GetAssignedTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).GetAssignedTo(ctx, req.(*AssignedTo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_CreateAssignedTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignedTo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).CreateAssignedTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_CreateAssignedTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).CreateAssignedTo(ctx, req.(*AssignedTo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_UpdateAssignedTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignedTo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).UpdateAssignedTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_UpdateAssignedTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).UpdateAssignedTo(ctx, req.(*AssignedTo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DeleteAssignedTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignedTo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DeleteAssignedTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DeleteAssignedTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DeleteAssignedTo(ctx, req.(*AssignedTo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_GetParkedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkedAt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).GetParkedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_GetParkedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).GetParkedAt(ctx, req.(*ParkedAt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_CreateParkedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkedAt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).CreateParkedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_CreateParkedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).CreateParkedAt(ctx, req.(*ParkedAt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_UpdateParkedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkedAt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).UpdateParkedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_UpdateParkedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).UpdateParkedAt(ctx, req.(*ParkedAt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DeleteParkedAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkedAt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DeleteParkedAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DeleteParkedAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DeleteParkedAt(ctx, req.(*ParkedAt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_AssignVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).AssignVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_AssignVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).AssignVehicle(ctx, req.(*AssignVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_RecalibrateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecalibrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).RecalibrateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_RecalibrateEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).RecalibrateEdge(ctx, req.(*RecalibrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_ShortestPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).ShortestPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_ShortestPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).ShortestPath(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_TopPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).TopPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_TopPairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).TopPairs(ctx, req.(*TopPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGraph_DepotsIdleStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGraphServer).DepotsIdleStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteGraph_DepotsIdleStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGraphServer).DepotsIdleStats(ctx, req.(*DepotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteGraph_ServiceDesc is the grpc.ServiceDesc for RouteGraph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGraph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routegraph.RouteGraph",
	HandlerType: (*RouteGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStop",
			Handler:    _RouteGraph_CreateStop_Handler,
		},
		{
			MethodName: "GetStop",
			Handler:    _RouteGraph_GetStop_Handler,
		},
		{
			MethodName: "UpdateStop",
			Handler:    _RouteGraph_UpdateStop_Handler,
		},
		{
			MethodName: "DeleteStop",
			Handler:    _RouteGraph_DeleteStop_Handler,
		},
		{
			MethodName: "CreateLine",
			Handler:    _RouteGraph_CreateLine_Handler,
		},
		{
			MethodName: "GetLine",
			Handler:    _RouteGraph_GetLine_Handler,
		},
		{
			MethodName: "UpdateLine",
			Handler:    _RouteGraph_UpdateLine_Handler,
		},
		{
			MethodName: "DeleteLine",
			Handler:    _RouteGraph_DeleteLine_Handler,
		},
		{
			MethodName: "CreateVehicle",
			Handler:    _RouteGraph_CreateVehicle_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _RouteGraph_GetVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicle",
			Handler:    _RouteGraph_UpdateVehicle_Handler,
		},
		{
			MethodName: "DeleteVehicle",
			Handler:    _RouteGraph_DeleteVehicle_Handler,
		},
		{
			MethodName: "CreateDepot",
			Handler:    _RouteGraph_CreateDepot_Handler,
		},
		{
			MethodName: "GetDepot",
			Handler:    _RouteGraph_GetDepot_Handler,
		},
		{
			MethodName: "UpdateDepot",
			Handler:    _RouteGraph_UpdateDepot_Handler,
		},
		{
			MethodName: "DeleteDepot",
			Handler:    _RouteGraph_DeleteDepot_Handler,
		},
		{
			MethodName: "GetNextEdge",
			Handler:    _RouteGraph_GetNextEdge_Handler,
		},
		{
			MethodName: "CreateNextEdge",
			Handler:    _RouteGraph_CreateNextEdge_Handler,
		},
		{
			MethodName: "UpdateNextEdge",
			Handler:    _RouteGraph_UpdateNextEdge_Handler,
		},
		{
			MethodName: "DeleteNextEdge",
			Handler:    _RouteGraph_DeleteNextEdge_Handler,
		},
		{
			MethodName: "GetServesEdge",
			Handler:    _RouteGraph_GetServesEdge_Handler,
		},
		{
			MethodName: "CreateServesEdge",
			Handler:    _RouteGraph_CreateServesEdge_Handler,
		},
		{
			MethodName: "UpdateServesEdge",
			Handler:    _RouteGraph_UpdateServesEdge_Handler,
		},
		{
			MethodName: "DeleteServesEdge",
			Handler:    _RouteGraph_DeleteServesEdge_Handler,
		},
		{
			MethodName: "GetAssignedTo",
			Handler:    _RouteGraph_GetAssignedTo_Handler,
		},
		{
			MethodName: "CreateAssignedTo",
			Handler:    _RouteGraph_CreateAssignedTo_Handler,
		},
		{
			MethodName: "UpdateAssignedTo",
			Handler:    _RouteGraph_UpdateAssignedTo_Handler,
		},
		{
			MethodName: "DeleteAssignedTo",
			Handler:    _RouteGraph_DeleteAssignedTo_Handler,
		},
		{
			MethodName: "GetParkedAt",
			Handler:    _RouteGraph_GetParkedAt_Handler,
		},
		{
			MethodName: "CreateParkedAt",
			Handler:    _RouteGraph_CreateParkedAt_Handler,
		},
		{
			MethodName: "UpdateParkedAt",
			Handler:    _RouteGraph_UpdateParkedAt_Handler,
		},
		{
			MethodName: "DeleteParkedAt",
			Handler:    _RouteGraph_DeleteParkedAt_Handler,
		},
		{
			MethodName: "AssignVehicle",
			Handler:    _RouteGraph_AssignVehicle_Handler,
		},
		{
			MethodName: "RecalibrateEdge",
			Handler:    _RouteGraph_RecalibrateEdge_Handler,
		},
		{
			MethodName: "ShortestPath",
			Handler:    _RouteGraph_ShortestPath_Handler,
		},
		{
			MethodName: "TopPairs",
			Handler:    _RouteGraph_TopPairs_Handler,
		},
		{
			MethodName: "DepotsIdleStats",
			Handler:    _RouteGraph_DepotsIdleStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/routegraph.proto",
}
